/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */


/**
 *
 * @author Andrew Unsworth
 */

import java.awt.*;
import javax.swing.*;
import java.io.*;
import java.util.*;

import javax.sql.rowset.JdbcRowSet;
import javax.sql.rowset.RowSetFactory;
import javax.sql.rowset.RowSetProvider;

import java.sql.*;
import java.sql.Connection;
import java.sql.SQLException;
import java.sql.ResultSetMetaData;
import javax.swing.table.DefaultTableModel;

public class UBSQLEditor extends javax.swing.JFrame {

    // declarations
    private static LoginDialog logDog = new LoginDialog();
    private static String mySQLDriver = "com.mysql.cj.jdbc.Driver";
    private static String partConnectString = "jdbc:mysql://";
    private static String fullConnectString = new String();
    private static Connection conn;
    private static String[] loginData = new String[3];
    private static String dbName = new String();
    private static String userName = new String();
    private static String passWord = new String();
	
    static BufferedReader keyboard = new BufferedReader(new InputStreamReader (System.in));
    static PrintWriter display = new PrintWriter(System.out, true);
    
    private static String[] columnNames;
    private static Object[][] tableData;
    
    
    
    /**
     * Creates new form UBSQLEditor
     */
    public UBSQLEditor() {
        initComponents();
        
        try {
        // create a connection to the UnsBank MySQL db
        connectToUB();
        } catch(Exception e) {
            display.println("An Exception has been thrown: " + e.toString());
        }
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        backgroundPanel = new javax.swing.JPanel();
        titlePanel = new javax.swing.JPanel();
        unsBankName = new javax.swing.JLabel();
        unsBankStrapline = new javax.swing.JLabel();
        sqlScriptPanel = new javax.swing.JPanel();
        sqlScriptScrollPane = new javax.swing.JScrollPane();
        sqlTextArea = new javax.swing.JTextArea();
        executeSQL = new javax.swing.JButton();
        clearSQL = new javax.swing.JButton();
        queryResultsPanel = new javax.swing.JPanel();
        queryResultsScrollPane = new javax.swing.JScrollPane();
        resultsTable = new javax.swing.JTable();
        msgPanel = new javax.swing.JPanel();
        msgScrollPane = new javax.swing.JScrollPane();
        msgTextArea = new javax.swing.JTextArea();
        exitAppButton = new javax.swing.JButton();
        menuBar = new javax.swing.JMenuBar();
        exitMenu = new javax.swing.JMenu();
        exitUtiltiyMenuItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("UNSBank SQL Editor");
        setBackground(new java.awt.Color(153, 153, 255));

        backgroundPanel.setBackground(new java.awt.Color(153, 153, 255));

        titlePanel.setBackground(new java.awt.Color(153, 153, 255));

        unsBankName.setFont(new java.awt.Font("Arial", 1, 60)); // NOI18N
        unsBankName.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        unsBankName.setText("UNSBank");

        unsBankStrapline.setFont(new java.awt.Font("Arial", 1, 24)); // NOI18N
        unsBankStrapline.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        unsBankStrapline.setText("Trust us, we're not like the other banks. We promise.");

        sqlScriptPanel.setBackground(new java.awt.Color(153, 153, 255));
        sqlScriptPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Enter SQL Script", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 1, 12))); // NOI18N
        sqlScriptPanel.setForeground(new java.awt.Color(153, 153, 255));

        sqlTextArea.setColumns(20);
        sqlTextArea.setFont(new java.awt.Font("Arial", 0, 16)); // NOI18N
        sqlTextArea.setRows(5);
        sqlScriptScrollPane.setViewportView(sqlTextArea);

        executeSQL.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        executeSQL.setText("Execute SQL");
        executeSQL.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                executeSQLActionPerformed(evt);
            }
        });

        clearSQL.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        clearSQL.setText("Clear Query");
        clearSQL.setPreferredSize(new java.awt.Dimension(93, 27));
        clearSQL.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearSQLActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout sqlScriptPanelLayout = new javax.swing.GroupLayout(sqlScriptPanel);
        sqlScriptPanel.setLayout(sqlScriptPanelLayout);
        sqlScriptPanelLayout.setHorizontalGroup(
            sqlScriptPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(sqlScriptPanelLayout.createSequentialGroup()
                .addGroup(sqlScriptPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(sqlScriptPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(sqlScriptScrollPane))
                    .addGroup(sqlScriptPanelLayout.createSequentialGroup()
                        .addGap(24, 24, 24)
                        .addComponent(clearSQL, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 294, Short.MAX_VALUE)
                        .addComponent(executeSQL)))
                .addContainerGap())
        );
        sqlScriptPanelLayout.setVerticalGroup(
            sqlScriptPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(sqlScriptPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(sqlScriptScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 475, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(sqlScriptPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(clearSQL, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(executeSQL))
                .addContainerGap())
        );

        queryResultsPanel.setBackground(new java.awt.Color(153, 153, 255));
        queryResultsPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Query Results", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 1, 12))); // NOI18N
        queryResultsPanel.setForeground(new java.awt.Color(153, 153, 255));

        resultsTable.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        resultsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Column One", "Column Two", "Column Three", "Column Four"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        queryResultsScrollPane.setViewportView(resultsTable);

        javax.swing.GroupLayout queryResultsPanelLayout = new javax.swing.GroupLayout(queryResultsPanel);
        queryResultsPanel.setLayout(queryResultsPanelLayout);
        queryResultsPanelLayout.setHorizontalGroup(
            queryResultsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(queryResultsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(queryResultsScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 539, Short.MAX_VALUE)
                .addContainerGap())
        );
        queryResultsPanelLayout.setVerticalGroup(
            queryResultsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(queryResultsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(queryResultsScrollPane)
                .addContainerGap())
        );

        javax.swing.GroupLayout titlePanelLayout = new javax.swing.GroupLayout(titlePanel);
        titlePanel.setLayout(titlePanelLayout);
        titlePanelLayout.setHorizontalGroup(
            titlePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(unsBankName, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(unsBankStrapline, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, titlePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(sqlScriptPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(queryResultsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        titlePanelLayout.setVerticalGroup(
            titlePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(titlePanelLayout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(unsBankName, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(unsBankStrapline, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(titlePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(queryResultsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(sqlScriptPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        msgPanel.setBackground(new java.awt.Color(153, 153, 255));
        msgPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "UNSBank Database Messages", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 1, 12))); // NOI18N

        msgTextArea.setEditable(false);
        msgTextArea.setColumns(20);
        msgTextArea.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        msgTextArea.setRows(5);
        msgScrollPane.setViewportView(msgTextArea);

        javax.swing.GroupLayout msgPanelLayout = new javax.swing.GroupLayout(msgPanel);
        msgPanel.setLayout(msgPanelLayout);
        msgPanelLayout.setHorizontalGroup(
            msgPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(msgPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(msgScrollPane)
                .addContainerGap())
        );
        msgPanelLayout.setVerticalGroup(
            msgPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(msgPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(msgScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        exitAppButton.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        exitAppButton.setText("Exit Application");
        exitAppButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitAppButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout backgroundPanelLayout = new javax.swing.GroupLayout(backgroundPanel);
        backgroundPanel.setLayout(backgroundPanelLayout);
        backgroundPanelLayout.setHorizontalGroup(
            backgroundPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(titlePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(backgroundPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(msgPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(backgroundPanelLayout.createSequentialGroup()
                .addGap(525, 525, 525)
                .addComponent(exitAppButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        backgroundPanelLayout.setVerticalGroup(
            backgroundPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(backgroundPanelLayout.createSequentialGroup()
                .addComponent(titlePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(msgPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(exitAppButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        exitMenu.setText("Exit");
        exitMenu.setToolTipText("");

        exitUtiltiyMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F4, java.awt.event.InputEvent.ALT_DOWN_MASK));
        exitUtiltiyMenuItem.setText("Exit Utility");
        exitUtiltiyMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitUtiltiyMenuItemActionPerformed(evt);
            }
        });
        exitMenu.add(exitUtiltiyMenuItem);

        menuBar.add(exitMenu);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(backgroundPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(backgroundPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void exitUtiltiyMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitUtiltiyMenuItemActionPerformed
        System.exit(0);
    }//GEN-LAST:event_exitUtiltiyMenuItemActionPerformed

    private void executeSQLActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_executeSQLActionPerformed
        String action = evt.getActionCommand();
	display.println("event: " + action);
			
	if(evt.getActionCommand().equals("Execute SQL")) {
            /* Determine if the query is a SELECT query or DDL
               and route the query to the relevant method for the
               query type, such as processSelect() or procesDDL()
            */
            display.println("Execute SQL pressed.");
            String text = sqlTextArea.getText();
            display.println("The TextArea's text is: " + text);
            
            StringTokenizer queryType = new StringTokenizer(text);
            String firstToken = queryType.nextToken().toUpperCase();
            display.println("First word of the query is: " + firstToken);
            
            // see if the query is a SELECT statement
            try {
            if(firstToken.equals("SELECT")) {
            display.println("The query is a SELECT query");           
            
            selectHandler(text);
            } 
                            else if(firstToken.equals("INSERT")) {
                            display.println("This query is a DML query");
                            updateHandler(text);
                        } else if(firstToken.equals("DELETE")) {
                            display.println("This query is a DELETE query");
                            deleteHandler(text);
                        } else {
                display.println("The query is not a SELECT, INSERT or DELETE statement so it can't be executed.");
                String resultsText = "The query is not a SELECT, INSERT or DELETE statement so it can't be executed.";
                msgTextArea.setText(resultsText);
            }
            } catch(IOException ioe) {
                display.println("An IOException occurred: " + ioe);
            } catch (SQLException sqlE) {
                display.println("An SQLException was thrown: " + sqlE);
            } catch (ClassNotFoundException cnfe) {
                display.println("A ClassNotFoundException was thrown: " + cnfe);
            }
        }
    }//GEN-LAST:event_executeSQLActionPerformed

    private void clearSQLActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearSQLActionPerformed
        sqlTextArea.setText("");
        sqlTextArea.requestFocus();
    }//GEN-LAST:event_clearSQLActionPerformed

    private void exitAppButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitAppButtonActionPerformed
        System.exit(0);
    }//GEN-LAST:event_exitAppButtonActionPerformed
    
    public static void connectToUB() throws ClassNotFoundException, SQLException {
        
        try{
        logDog.setModalityType(Dialog.ModalityType.APPLICATION_MODAL);
        logDog.setVisible(true);
        loginData = logDog.getLoginData();
        
        dbName = loginData[0];
        userName = loginData[1];
        passWord = loginData[2];
        fullConnectString = partConnectString.concat(dbName);
        
         
        Class.forName(mySQLDriver);
        conn = DriverManager.getConnection(fullConnectString, userName, passWord);
        } catch(ClassNotFoundException cnfe) {
            display.println("ClassNotFoundException thrown in connectToUB(): " + cnfe);
        } catch(SQLException sqlE) {
            display.println("SQLException thRown in connectToUB(): " + sqlE);
            JFrame msgFrame = new JFrame();
            JOptionPane.showMessageDialog(msgFrame, "Your user name and/or password are incorrect:  " + sqlE.toString(), "Login Error", JOptionPane.ERROR_MESSAGE);
            connectToUB();
            }
        
    }
    
    public void selectHandler(String text) throws IOException, SQLException, ClassNotFoundException {
        
            String resultsText = new String();
            
                      
            RowSetFactory factory = RowSetProvider.newFactory();
            
            try (JdbcRowSet jdbcRs = factory.createJdbcRowSet()) {
                System.out.println("In the selectHandler() Try block");
                jdbcRs.setUrl(fullConnectString);
                jdbcRs.setUsername(userName);
                jdbcRs.setPassword(passWord);
                jdbcRs.setCommand(text);
                jdbcRs.execute();
                System.out.println("After jdbcRs.execute()");
                
            
            ResultSetMetaData rsmd = jdbcRs.getMetaData();
            int numberOfColumns = rsmd.getColumnCount();
            
            display.println("number of columns: " + numberOfColumns);
            
           // get column names
           columnNames = new String[numberOfColumns];
           // use a loop to add column names to the columnNames array
           for (int index = 0; index < numberOfColumns; index++) {
               columnNames[index] = rsmd.getColumnName(index + 1);
               display.println("column " + index + " is called " + columnNames[index]);
           } 
           
           // get the number of rows
           int numberOfRows = 0;
           jdbcRs.beforeFirst();
           while(jdbcRs.next()) {
               numberOfRows++;
           }
           System.out.println("Number of rows: " + numberOfRows);
           jdbcRs.beforeFirst();
           
           // initialise tableData with number of rows and number of columns in the resultset
           tableData = new Object[numberOfRows][numberOfColumns];
           
           
           // use a FOR loop within a WHILE loop to add rows of data to the tableData array
           int row = 0;
           while(jdbcRs.next()) {   
               display.println("In While loop. ROW == " + row);
                for (int index = 0; index < numberOfColumns; index++) {
                    String tempData = jdbcRs.getString(index + 1);
                    tableData[row][index] = tempData;
                    display.println("tableData: " + tableData[row][index]);
                }
                row++;
            }
           
            resultsTable.setModel(new DefaultTableModel(tableData, columnNames));
           
	    } catch (SQLException sqlEx) {
                                String ex = new String(sqlEx.toString());
                                display.println("SQLException thrown in selectHandler(): " + ex);
                                sqlExHandler(ex); 
                                }
    }
    
    public void updateHandler(String sqlStmt) throws SQLException, ClassNotFoundException {
        display.println("In updateHandler()");
        display.println("You entered: " + sqlStmt);
        
        
        // execute the SQL statement
        try (Statement command = conn.createStatement()) {
            int rowsAffected = command.executeUpdate (sqlStmt);
            display.println(rowsAffected + " rows were added to the table.");
            msgTextArea.setText(rowsAffected + " rows were added to the table.");
        } catch (SQLException sqlEx) {
                String ex = sqlEx.toString();
                display.println("In catch statement: " + ex);
                sqlExHandler(ex);
        }
    }    
    
    public void deleteHandler(String sqlStmt) throws SQLException, ClassNotFoundException {
        display.println("In deleteHandler()");
        display.println("You entered: " + sqlStmt);
        
        
        // execute the SQL statement
        try (Statement command = conn.createStatement()) {
            int rowsAffected = command.executeUpdate (sqlStmt);
            display.println(rowsAffected + " rows were deleted from the table.");
            msgTextArea.setText(rowsAffected + " rows were deleted from the table.");
        } catch (SQLException sqlEx) {
                String ex = sqlEx.toString();
                display.println("In catch statement: " + ex);
                sqlExHandler(ex);
                }
    }  
    
    public void sqlExHandler(String sqlEx) {
        display.println("in sqlExHandler()");
        String errorReport = sqlEx;
        msgTextArea.setText(errorReport);
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(UBSQLEditor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(UBSQLEditor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(UBSQLEditor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(UBSQLEditor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new UBSQLEditor().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel backgroundPanel;
    private javax.swing.JButton clearSQL;
    private javax.swing.JButton executeSQL;
    private javax.swing.JButton exitAppButton;
    private javax.swing.JMenu exitMenu;
    private javax.swing.JMenuItem exitUtiltiyMenuItem;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JPanel msgPanel;
    private javax.swing.JScrollPane msgScrollPane;
    private javax.swing.JTextArea msgTextArea;
    private javax.swing.JPanel queryResultsPanel;
    private javax.swing.JScrollPane queryResultsScrollPane;
    private javax.swing.JTable resultsTable;
    private javax.swing.JPanel sqlScriptPanel;
    private javax.swing.JScrollPane sqlScriptScrollPane;
    private javax.swing.JTextArea sqlTextArea;
    private javax.swing.JPanel titlePanel;
    private javax.swing.JLabel unsBankName;
    private javax.swing.JLabel unsBankStrapline;
    // End of variables declaration//GEN-END:variables
}
